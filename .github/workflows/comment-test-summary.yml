name: Comment Test Summary

on:
  workflow_run:
    workflows: ["Build Recipes"]
    types:
      - completed

permissions:
  pull-requests: write
  contents: read

jobs:
  download:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}
    steps:
      - name: 'Download test summary artifacts'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            // Find all test summary artifacts
            let testSummaryArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("test-summary-");
            });
            
            if (testSummaryArtifacts.length === 0) {
              console.log("No test summary artifacts found");
              return;
            }
            
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/test-artifacts';
            
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp);
            }
            
            // Download all test summary artifacts
            for (let artifact of testSummaryArtifacts) {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: artifact.id,
                 archive_format: 'zip',
              });
              
              const artifactPath = path.join(temp, `${artifact.name}.zip`);
              fs.writeFileSync(artifactPath, Buffer.from(download.data));
              console.log(`Downloaded artifact: ${artifact.name}`);
            }

      - name: 'Unzip test summary artifacts'
        run: |
          cd "${{ runner.temp }}/test-artifacts"
          for zip in *.zip; do
            if [ -f "$zip" ]; then
              unzip "$zip" -d "${zip%.zip}"
              echo "Unzipped: $zip"
            fi
          done

      - name: 'Comment test summary on PR'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/test-artifacts';
            
            // Get PR number from the workflow run
            const prNumber = context.payload.workflow_run.pull_requests[0]?.number;
            if (!prNumber) {
              console.log("No PR number found in workflow run");
              return;
            }
            
            // Collect all test summary files
            let allSummaries = [];
            const artifactDirs = fs.readdirSync(temp).filter(item => {
              return fs.statSync(path.join(temp, item)).isDirectory();
            });
            
            for (let dir of artifactDirs) {
              const summaryFile = path.join(temp, dir, `${dir}.md`);
              if (fs.existsSync(summaryFile)) {
                const content = fs.readFileSync(summaryFile, 'utf8');
                allSummaries.push(content);
                console.log(`Found test summary: ${dir}`);
              }
            }
            
            if (allSummaries.length === 0) {
              console.log("No test summary files found");
              return;
            }
            
            // Combine all summaries
            const combinedSummary = allSummaries.join('\n\n---\n\n');
            const finalComment = `# ðŸ§ª Test Results Summary\n\n${combinedSummary}`;
            
            // Search for existing test summary comments
            const comments = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Look for a comment that was created by the GitHub Actions bot and contains test summary
            const testSummaryComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('ðŸ§ª Test Results Summary')
            );
            
            if (testSummaryComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: testSummaryComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: finalComment
              });
              console.log(`Updated existing test summary comment ID: ${testSummaryComment.id}`);
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: finalComment
              });
              console.log('Created new test summary comment');
            }
