name: Build Recipes

on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      scipy:
        description: 'Run SciPy test suite'
        required: false
        default: false
        type: boolean
  schedule:
  # Twice per week, on Monday and Thursday
  - cron: "0 0 * * 1,4"

permissions:
  contents: write
  pull-requests: write

env:
  # Increase this value to reset cache if environment.yml has not changed
  CONDA_CACHE_NUMBER: 0
  # Increase this value to reset cache if emscripten_version has not changed
  EMSDK_CACHE_FOLDER: 'emsdk-cache'
  EMSDK_CACHE_NUMBER: 0
  CCACHE_DIR: /tmp/.ccache
  CCACHE_CACHE_NUMBER: 0
  FORCE_COLOR: 3

jobs:
  check-scipy-test-trigger:
    runs-on: ubuntu-latest
    outputs:
      test-scipy: ${{ steps.check-build-trigger.outputs.trigger }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      - name: Check if SciPy tests should run
        id: check-build-trigger
        env:
          GITHUB_EVENT_PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_EVENT_INPUTS_SCIPY: ${{ github.event.inputs.scipy }}
        # Run if commit_msg contains "[scipy]" or
        # if the PR has the "scipy" label or
        # if the PR title contains "[scipy]" or if
        # the workflow is triggered manually with the `scipy` input set to true
        run: |
          set -ex

          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          PR_TITLE="${GITHUB_EVENT_PULL_REQUEST_TITLE}"
          SCIPY_LABEL=${{ contains(github.event.pull_request.labels.*.name, 'scipy') }}
          SCIPY_INPUT="${GITHUB_EVENT_INPUTS_SCIPY}"
          GITHUB_EVENT_NAME="${{ github.event_name }}"

          if [[ "$COMMIT_MSG" =~ \[scipy\] ]] || \
             [[ "$PR_TITLE" =~ \[scipy\] ]] || \
             [[ "$SCIPY_LABEL" == "true" ]] || \
             { [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]] && [[ "$SCIPY_INPUT" == "true" ]]; }
          then
            echo "SciPy tests will run"
            echo "trigger=true" >> $GITHUB_OUTPUT
          else
            echo "SciPy tests will not run"
            echo "trigger=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: [check-scipy-test-trigger]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      - name: Install Emscripten ccache
        run: |

          # FIXME: Installing ccache using `emsdk install ccache-git-emscripten-64bit` doesn't work well in conda env:
          # https://stackoverflow.com/questions/71340058/conda-does-not-look-for-libpthread-and-libpthread-nonshared-at-the-right-place-w
          git clone https://github.com/juj/ccache -b emscripten --depth 1
          cd ccache
          cmake .
          make ccache
          export PATH=$(pwd):$PATH
          cd ..

          which ccache

      - name: Cache conda
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{
            hashFiles('environment.yml') }}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: pyodide-env
          conda-remove-defaults: true
          channels: conda-forge

      - name: Get Date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Cache Conda env
        id: conda-cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CONDA_CACHE_NUMBER }}

      - name: Update environment if cache miss
        run:
          mamba env update -n pyodide-env -f environment.yml
        if: steps.conda-cache.outputs.cache-hit != 'true'

      # See https://github.com/jlumbroso/free-disk-space/issues/40
      - name: Disable man-db to free up disk space faster
        run: |
          echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
          sudo dpkg-reconfigure man-db

      - name: Free unused disk space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false # https://github.com/jlumbroso/free-disk-space/issues/12

      - name: Install latest pyodide-build and build dependencies
        run : |
          which python
          ./tools/prepare_pyodide_build.sh

      - name: Install emscripten
        run: |
          python tools/install_and_patch_emscripten.py

      - name: Set ccache suffix
        run: |
          # This step makes the cache key in the main branch and PRs different.
          # main branch run a full build, while PRs run a partial build
          # so we keep the ccache cache separate
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo CCACHE_SUFFIX="-pr" >> $GITHUB_ENV
          fi

      - name: Cache ccache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CCACHE_DIR }}-${{ env.CCACHE_CACHE_NUMBER }}-${{ env.EMSCRIPTEN_VERSION }}-${{ runner.os }}${{ env.CCACHE_SUFFIX }}
          restore-keys: |
            ${{ env.CCACHE_DIR }}-${{ env.CCACHE_CACHE_NUMBER }}-${{ env.EMSCRIPTEN_VERSION }}-${{ runner.os }}

      - name: Calculate recipes to build (pull_request)
        if: github.event_name == 'pull_request'
        id: calculate_recipes_pr
        env:
          GITHUB_EVENT_PULL_REQUEST_BASE_REF: ${{ github.event.pull_request.base.ref }}
          NEEDS_CHECK_SCIPY_TEST_TRIGGER_OUTPUTS_TEST_SCIPY: ${{ needs.check-scipy-test-trigger.outputs.test-scipy }}
        run: |
          export CHANGED_RECIPES=$(python ./tools/calc_diff.py \
            --base origin/${GITHUB_EVENT_PULL_REQUEST_BASE_REF} \
            --target ${{ github.sha }})

          echo "Changed recipes: $CHANGED_RECIPES"

          # Check if scipy should be included
          SCIPY_WILL_BE_TESTED="${NEEDS_CHECK_SCIPY_TEST_TRIGGER_OUTPUTS_TEST_SCIPY}"

          # If there are no changed recipes, we build only core packages sets
          if [ -z "$CHANGED_RECIPES" ]; then
            # No changed recipes
            if [ "$SCIPY_WILL_BE_TESTED" == "true" ]; then
              echo "recipes=tag:core,scipy" >> "$GITHUB_OUTPUT"
              echo "Building: tag:core,scipy (no changes + scipy trigger)"
            else
              echo "recipes=tag:core" >> "$GITHUB_OUTPUT"
              echo "Building: tag:core (no changes)"
            fi
          else
            # There are changed recipes
            if [ "$SCIPY_WILL_BE_TESTED" == "true" ]; then
              # Check if scipy is already in changed recipes to avoid duplication
              if [[ "$CHANGED_RECIPES" == *"scipy"* ]]; then
                echo "recipes=$CHANGED_RECIPES,tag:core" >> "$GITHUB_OUTPUT"
                echo "Building: $CHANGED_RECIPES,tag:core (scipy already included in changes)"
              else
                echo "recipes=$CHANGED_RECIPES,tag:core,scipy" >> "$GITHUB_OUTPUT"
                echo "Building: $CHANGED_RECIPES,tag:core,scipy (changes + scipy trigger)"
              fi
            else
              echo "recipes=$CHANGED_RECIPES,tag:core" >> "$GITHUB_OUTPUT"
              echo "Building: $CHANGED_RECIPES,tag:core (changes only)"
            fi
          fi

      - name: Build recipes (full)
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || contains(github.event.pull_request.title, '[full build]')
        run: |
          ccache -z
          export _EMCC_CACHE=1

          export PIP_CONSTRAINT=$(pwd)/tools/constraints.txt
          source emsdk/emsdk_env.sh
          mkdir -p result
          pyodide build-recipes "*" --install --install-dir=./repodata --log-dir=build-logs | tee result/build_output.log
          ccache -s

      - name: Build recipes (changed only)
        if: github.event_name == 'pull_request' && !contains(github.event.pull_request.title, '[full build]')
        env:
          STEPS_CALCULATE_RECIPES_PR_OUTPUTS_RECIPES: ${{ steps.calculate_recipes_pr.outputs.recipes }}
        run: |
          ccache -z
          export _EMCC_CACHE=1

          export PIP_CONSTRAINT=$(pwd)/tools/constraints.txt
          source emsdk/emsdk_env.sh
          mkdir -p result
          pyodide build-recipes ${STEPS_CALCULATE_RECIPES_PR_OUTPUTS_RECIPES} --install --install-dir=./repodata --log-dir=build-logs | tee result/build_output.log
          ccache -s

      - name: Parse build results
        id: parse_results
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          if [ -f result/build_output.log ]; then
            python tools/parse_build_result.py result/build_output.log > result/build_summary.md
            echo "SUMMARY_CREATED=true" >> $GITHUB_ENV
          else
            echo "No build log found"
            echo "SUMMARY_CREATED=false" >> $GITHUB_ENV
          fi

          echo ${PR_NUMBER} > result/pr_number
      - name: Compress build artifacts
        run: |
          tar -czvf packages.tar.gz -C repodata .

      - name: Copy Pyodide runtime to repodata for testing
        run: |
          ./tools/copy_pyodide_runtime.sh ./repodata
      - name: Store the build summary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: github.event_name == 'pull_request' && env.SUMMARY_CREATED == 'true'
        with:
          name: build-result
          path: result/
          retention-days: 7

      - name: Store artifacts build
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: repodata
          path: ./repodata/
          retention-days: 7
      
      - name: Store build logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-log
          path: ./build-logs/
          retention-days: 7

      - name: Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./packages.tar.gz
            ./repodata/pyodide-lock.json

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        test-config: [
          {runner: selenium, runtime: chrome, runtime-version: 134 },
          {runner: selenium, runtime: firefox, runtime-version: "136.0" },
        ]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      - name: Cache conda
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{
            hashFiles('environment.yml') }}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: pyodide-env
          conda-remove-defaults: true
          channels: conda-forge

      - name: Get Date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Cache Conda env
        id: conda-cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CONDA_CACHE_NUMBER }}

      - name: Update environment if cache miss
        run:
          mamba env update -n pyodide-env -f environment.yml
        if: steps.conda-cache.outputs.cache-hit != 'true'

      - uses: pyodide/pyodide-actions/install-browser@012fa537869d343726d01863a34b773fc4d96a14 # v2
        with:
          runner: ${{ matrix.test-config.runner }}
          browser: ${{ matrix.test-config.runtime }}
          browser-version: ${{ matrix.test-config.runtime-version }}

      - name: Download build artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: repodata
          path: ./dist/

      - name: Install test dependencies
        run: |
          which python
          echo y | python -m pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest -v \
            --dist-dir=./dist/ \
            -n $(nproc) \
            --runner=${{ matrix.test-config.runner }} \
            --rt ${{ matrix.test-config.runtime }} \
            packages

  # This job runs the SciPy tests with Node.js based on the
  # above checks; separate from the main test job.
  test-scipy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    needs: [build, check-scipy-test-trigger]
    if: needs.check-scipy-test-trigger.outputs.test-scipy == 'true'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      - name: Cache conda
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: pyodide-env
          conda-remove-defaults: true
          channels: conda-forge

      - name: Get Date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Cache Conda env
        id: conda-cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}-${{ steps.get-date.outputs.today }}-${{ hashFiles('environment.yml') }}-${{ env.CONDA_CACHE_NUMBER }}

      - name: Update environment if cache miss
        run:
          mamba env update -n pyodide-env -f environment.yml
        if: steps.conda-cache.outputs.cache-hit != 'true'

      - name: Download build artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: repodata
          path: ./dist/

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "24"

      - name: Prepare SciPy test environment
        run: |
          # First, install any version of pyodide from npm
          # to get the file structure
          npm install pyodide

          # Copy the Pyodide runtime to the dist folder
          ./tools/copy_pyodide_runtime.sh ./dist

          # Copy the Pyodide files from the dist folder to the
          # node_modules/pyodide folder, so that the SciPy tests
          # can find them
          cp -f dist/* node_modules/pyodide

          # Delete conftest.py from repo root to avoid conflicts
          rm -rf conftest.py

          # Change scipy-conftest.py to conftest.py as pytest
          # doesn't seem to recognise it otherwise
          mv packages/scipy/scipy-conftest.py packages/scipy/conftest.py

      - name: Run SciPy test suite
        run: node scipy-pytest.js --pyargs scipy -m "not slow" -vra
        working-directory: packages/scipy/

  release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: deploy
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
          persist-credentials: false

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: pyodide-env
          conda-remove-defaults: true
          channels: conda-forge

      - name: Download build artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: repodata
          path: ./repodata/

      - name: Install anaconda-client
        run: |
          mamba install -c defaults anaconda-client -y

      - name: Upload wheels
        run: |
          # Anaconda denies packages with long descriptions, so set summary to null
          anaconda -t ${{ secrets.ANACONDA_API_TOKEN }} upload --force ./repodata/*.whl --summary=" " --description=" "
