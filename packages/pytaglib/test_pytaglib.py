from gzip import decompress

import pytest
from pytest_pyodide import run_in_pyodide

data = [
    decompress(b"\x1f\x8b\x08\x00\x17%Xh\x02\xff\x0b\xf2ts\xab`a`\x08w\x0csM\xcb-Q\x10````d`bpY\xc3\xc0 \xb0\x91\x89\x81\x85A\x80!%\xb1$\x11$^\x93\xfaI'e\x812\xfb\xa5cE\xa2\x7f\x04\x8f0x\xba\x18+\xc8\x02\xf5\x02i \xc9\xc0\xc0!\x1c\xe2\xe8\xe3\x04dp200\xfbV*8\xe6$\x95\xe62\x8c\x82Q0\nF.\xf0\xf1\x0c\x0e\x11\x03\xd2\x9e~n\xfe\x9e\x01A.\xc0\xc2\x81\x01Q8\x00\x00\x9c\x8f\x1e\xa2\x80\x04\x00\x00"),
    decompress(b'\x1f\x8b\x08\x00x\x9dYh\x02\xffK\xf3Itf``P\x12`\x10\x00R\xd2@\xc4u\xc4\xe9\x03\x90\xc9\xf2\x9d\xa7\xd9T\xa6\xf9\xf7\x89\x84\xba\x9f\t\rn\xbf4X\x18\x18\xac\x14\x80\x12E\xa9i\xa9E\xa9y\xc9\xa9\n9\x99In>\x8e\xce\n\x86z\xc6z\xc6\nF\x06\x86\x96\x06\x16\x06&\x8c@5|@\xec\xe8\xe3\x14\xeak\xeb[\xa9\xe0\x98\x93T\x9a\xdb\xc8\xc0\xff\x8ea\x14\x8c\x82Q0\nF\xc1(\x18\x05\xa3`\x14\x8c\x82Q0\nF\xc1(\x18\x05\xc3\x0c\xfc\xff\x91)\xc1\xc0\xbc\x8d)\xb5fA\xea\xb1\xcb\x82\x7f\x98t>\xb3\xab\x88\x161\x1c\xbd4\x03\x00\xa3)\x16{u\x10\x00\x00')
]
file_extensions = [
    ".wav",
    ".flac"
]
tags = [
    {"ALBUM": ["My Album"]},
    {"ALBUM": ["My Album"]}
]
ids = [
    "riff",
    "flac"
]

@pytest.mark.parametrize(
    "encoded_data,file_extension,expected_tags", zip(data, file_extensions, tags), ids=ids
)
@run_in_pyodide(packages=["pytaglib"])
def test_read(selenium, encoded_data, file_extension, expected_tags):
    # pytaglib does not support BytesIO
    with open("/tmp/testfile" + file_extension, "wb") as file:
        file.write(encoded_data)

    import taglib

    with taglib.File("/tmp/testfile.wav") as song:
        assert song.tags == expected_tags
